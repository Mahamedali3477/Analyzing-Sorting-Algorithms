SELECTION SORT

void SelectionSort()

{

    int i, j, min_idx; //arr[] is already declared array

for (i = 0; i < n-1; i++) // n is already declared size of array

    {

  min_idx = i;

        for (j = i+1; j < n; j++)

        if (arr[j] < arr[min_idx])

            min_idx = j;

    swap(&arr[min_idx], &arr[i]);

    }

}

INSERTION SORT

void InsertionSort(int arr[], int n) //globally declared array and size of array,n  

{

    int i, key, j;

    for (i = 1; i < n; i++)

    {

        key = arr[i];

        j = i - 1;

        while (j >= 0 && arr[j] > key)

        {

            arr[j + 1] = arr[j];

            j = j - 1;

        }

        arr[j + 1] = key;

    }

}

MERGE SORT

void Merge(int arr[], int l, int m, int r)

{

    int i, j, k;

    int n1 = m - l + 1;

    int n2 = r - m;

      /* create temp arrays */

    int L[n1], R[n2];

  

    /* Copy data to temp arrays L[] and R[] */

    for (i = 0; i < n1; i++)

        L[i] = arr[l + i];

    for (j = 0; j < n2; j++)

        R[j] = arr[m + 1+ j];

  

    /* Merge the temp arrays back into arr[l..r]*/

    i = 0; // Initial index of first subarray

    j = 0; // Initial index of second subarray

    k = l; // Initial index of merged subarray

    while (i < n1 && j < n2)

    {

        if (L[i] <= R[j])

        {

            arr[k] = L[i];

            i++;

        }

        else

        {

            arr[k] = R[j];

            j++;

        }

        k++;

    }

  

  

    while (i < n1)

    {

        arr[k] = L[i];

        i++;

        k++;

    }    

    while (j < n2)

    {

        arr[k] = R[j];

        j++;

        k++;

    }

}

void MergeSort(int arr[], int l, int r)

{

    if (l < r)

    {

       int m = l+(r-l)/2;   

MergeSort(arr, l, m);

MergeSort(arr, m+1, r);   

Merge(arr, l, m, r);

    }

}

QUICKSORT  

int partition (int arr[], int low, int high)

{

    int pivot = arr[high];    // pivot

    int i = (low - 1); // Index of smaller element

  

    for (int j = low; j <= high- 1; j++)

    {

        // If current element is smaller than or

        // equal to pivot

        if (arr[j] <= pivot)

        {

            i++;    // increment index of smaller element

            swap(&arr[i], &arr[j]);

        }

    }

    swap(&arr[i + 1], &arr[high]);

    return (i + 1);

}

  

/* The main function that implements QuickSort

arr[] --> Array to be sorted,

  low --> Starting index,

  high --> Ending index */

void QuickSort(int arr[], int low, int high)

{

    if (low < high)

    {

        /* pi is partitioning index, arr[p] is now

           at right place */

        int pi = partition(arr, low, high);

          // Separately sort elements before

        // partition and after partition

QuickSort(arr, low, pi - 1);

QuickSort(arr, pi + 1, high);

    }

}

void swap(int* a, int* b)

{

    int t = *a;

    *a = *b;

    *b = t;

}
